# Generated by Django 2.2.15 on 2020-10-20 08:01

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("enhydris_autoprocess", "0001_initial"),
        ("enhydris_autoprocess", "0002_validation_station"),
        ("enhydris_autoprocess", "0003_rename_validation_to_auto_process"),
        ("enhydris_autoprocess", "0004_curveinterpolation"),
        ("enhydris_autoprocess", "0005_curveperiod"),
        ("enhydris_autoprocess", "0006_soft_limits"),
        ("enhydris_autoprocess", "0007_aggregation"),
        ("enhydris_autoprocess", "0008_aggregation_max_missing"),
        ("enhydris_autoprocess", "0009_timeseries_groups"),
        ("enhydris_autoprocess", "0010_timeseries_groups_b"),
        ("enhydris_autoprocess", "0011_timeseries_groups_c"),
    ]

    initial = True

    dependencies = [
        ("enhydris", "0037_timeseries_groups"),
        ("enhydris", "0011_gentity_event_user_optional"),
    ]

    operations = [
        migrations.CreateModel(
            name="AutoProcess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timeseries_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.TimeseriesGroup",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Auto processes",
            },
        ),
        migrations.CreateModel(
            name="Checks",
            fields=[
                (
                    "autoprocess_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris_autoprocess.AutoProcess",
                    ),
                ),
            ],
            bases=("enhydris_autoprocess.autoprocess",),
        ),
        migrations.CreateModel(
            name="RangeCheck",
            fields=[
                ("upper_bound", models.FloatField()),
                ("lower_bound", models.FloatField()),
                ("soft_lower_bound", models.FloatField(blank=True, null=True)),
                ("soft_upper_bound", models.FloatField(blank=True, null=True)),
                (
                    "checks",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="enhydris_autoprocess.Checks",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CurveInterpolation",
            fields=[
                (
                    "autoprocess_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris_autoprocess.AutoProcess",
                    ),
                ),
                (
                    "target_timeseries_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.TimeseriesGroup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CurvePeriod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "curve_interpolation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris_autoprocess.CurveInterpolation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CurvePoint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("x", models.FloatField()),
                ("y", models.FloatField()),
                (
                    "curve_period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris_autoprocess.CurvePeriod",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Aggregation",
            fields=[
                (
                    "autoprocess_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="enhydris_autoprocess.AutoProcess",
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("sum", "Sum"),
                            ("mean", "Mean"),
                            ("max", "Max"),
                            ("min", "Min"),
                        ],
                        max_length=4,
                    ),
                ),
                (
                    "resulting_timestamp_offset",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "If the time step of the target time series is one day "
                            '("D") and you set the resulting timestamp offset to '
                            '"1min", the resulting time stamps will be ending in '
                            "23:59.  This does not modify the calculations; it only "
                            "subtracts the specified offset from the timestamp after "
                            "the calculations have finished. Leave empty to leave the "
                            "timestamps alone."
                        ),
                        max_length=7,
                    ),
                ),
                (
                    "max_missing",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text=(
                            "Defines what happens if some of the source records "
                            "corresponding to a destination record are missing. "
                            "Suppose you are aggregating ten-minute to hourly and for "
                            "23 January between 12:00 and 13:00 there are only four "
                            "nonempty records in the ten-minute time series (instead "
                            "of the usual six). If you set this to 1 or lower, the "
                            "hourly record for 23 January 13:00 will be empty; if 2 or "
                            "larger, the hourly value will be derived from the four "
                            "values. In the latter case, the MISS flag will also be "
                            "set in the resulting record."
                        ),
                    ),
                ),
                (
                    "target_time_step",
                    models.CharField(
                        help_text=(
                            'E.g. "10min", "H" (hourly), "D" (daily), "M" (monthly), '
                            '"Y" (yearly). More specifically, it\'s an optional number '
                            "plus a unit, with no space in between. The units "
                            "available are min, H, D, M, Y."
                        ),
                        max_length=7,
                    ),
                ),
            ],
            bases=("enhydris_autoprocess.autoprocess",),
        ),
    ]
